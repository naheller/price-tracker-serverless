org: naheller
app: price-tracker
service: price-tracker
frameworkVersion: "3"
useDotenv: true

custom:
  tableNameProducts: "PriceTrackerProducts"
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      migrate: true

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ProductsTable, Arn]
  environment:
    PRODUCTS_TABLE: ${self:custom.tableNameProducts}

functions:
  api:
    handler: index.handler
    events:
      - httpApi: "*"
  priceCheck:
    handler: priceChecker.checkPricesAndAlert
    timeout: 60
    # events:
    #   - schedule: cron(55 19 * * ? *)
  addToQueue:
    handler: queueActions.addToQueue2
    # environment:
    #   QUEUE_URL: ${construct:product-queue.queueUrl}
    events:
      - schedule: cron(0 12 * * ? *)

resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableNameProducts}

constructs:
  product-queue:
    type: queue
    # fifo: true
    # delay: 60
    batchSize: 1
    # maxBatchingWindow: 5
    # maxConcurrency: 2
    worker:
      handler: queueActions.processQueueItem2
      # timeout: 10
      # reservedConcurrency: 1 # does this work?

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-ignore
  - serverless-dotenv-plugin
  - serverless-lift
